{"version":3,"file":"static/js/839.13b2f417.chunk.js","mappings":"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","sources":["../node_modules/@azure/msal-browser/src/naa/BridgeStatusCode.ts","../node_modules/@azure/msal-browser/src/naa/mapping/NestedAppAuthAdapter.ts","../node_modules/@azure/msal-browser/src/naa/BridgeError.ts","../node_modules/@azure/msal-browser/src/error/NestedAppAuthError.ts","../node_modules/@azure/msal-browser/src/controllers/NestedAppAuthController.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nexport enum BridgeStatusCode {\n    USER_INTERACTION_REQUIRED = \"USER_INTERACTION_REQUIRED\",\n    USER_CANCEL = \"USER_CANCEL\",\n    NO_NETWORK = \"NO_NETWORK\",\n    TRANSIENT_ERROR = \"TRANSIENT_ERROR\",\n    PERSISTENT_ERROR = \"PERSISTENT_ERROR\",\n    DISABLED = \"DISABLED\",\n    ACCOUNT_UNAVAILABLE = \"ACCOUNT_UNAVAILABLE\",\n    NESTED_APP_AUTH_UNAVAILABLE = \"NESTED_APP_AUTH_UNAVAILABLE\", // NAA is unavailable in the current context, can retry with standard browser based auth\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { TokenRequest } from \"../TokenRequest\";\nimport { AccountInfo as NaaAccountInfo } from \"../AccountInfo\";\nimport { RedirectRequest } from \"../../request/RedirectRequest\";\nimport { PopupRequest } from \"../../request/PopupRequest\";\nimport { TokenResponse } from \"../TokenResponse\";\nimport {\n    AccountInfo as MsalAccountInfo,\n    AuthError,\n    ClientAuthError,\n    ClientConfigurationError,\n    InteractionRequiredAuthError,\n    ServerError,\n    ICrypto,\n    Logger,\n    AuthToken,\n    TokenClaims,\n    ClientAuthErrorCodes,\n    AuthenticationScheme,\n    RequestParameterBuilder,\n    StringUtils,\n    createClientAuthError,\n} from \"@azure/msal-common\";\nimport { isBridgeError } from \"../BridgeError\";\nimport { BridgeStatusCode } from \"../BridgeStatusCode\";\nimport { AuthenticationResult } from \"../../response/AuthenticationResult\";\nimport {} from \"../../error/BrowserAuthErrorCodes\";\n\nexport class NestedAppAuthAdapter {\n    protected crypto: ICrypto;\n    protected logger: Logger;\n    protected clientId: string;\n    protected clientCapabilities: string[];\n\n    constructor(\n        clientId: string,\n        clientCapabilities: string[],\n        crypto: ICrypto,\n        logger: Logger\n    ) {\n        this.clientId = clientId;\n        this.clientCapabilities = clientCapabilities;\n        this.crypto = crypto;\n        this.logger = logger;\n    }\n\n    public toNaaTokenRequest(\n        request: PopupRequest | RedirectRequest\n    ): TokenRequest {\n        let extraParams: Map<string, string>;\n        if (request.extraQueryParameters === undefined) {\n            extraParams = new Map<string, string>();\n        } else {\n            extraParams = new Map<string, string>(\n                Object.entries(request.extraQueryParameters)\n            );\n        }\n\n        const requestBuilder = new RequestParameterBuilder();\n        const claims = requestBuilder.addClientCapabilitiesToClaims(\n            request.claims,\n            this.clientCapabilities\n        );\n        const tokenRequest: TokenRequest = {\n            userObjectId: request.account?.homeAccountId,\n            clientId: this.clientId,\n            authority: request.authority,\n            scope: request.scopes.join(\" \"),\n            correlationId:\n                request.correlationId !== undefined\n                    ? request.correlationId\n                    : this.crypto.createNewGuid(),\n            nonce: request.nonce,\n            claims: !StringUtils.isEmptyObj(claims) ? claims : undefined,\n            state: request.state,\n            authenticationScheme:\n                request.authenticationScheme || AuthenticationScheme.BEARER,\n            extraParameters: extraParams,\n        };\n\n        return tokenRequest;\n    }\n\n    public fromNaaTokenResponse(\n        request: TokenRequest,\n        response: TokenResponse,\n        reqTimestamp: number\n    ): AuthenticationResult {\n        if (!response.id_token || !response.access_token) {\n            throw createClientAuthError(ClientAuthErrorCodes.nullOrEmptyToken);\n        }\n\n        const expiresOn = new Date(\n            (reqTimestamp + (response.expires_in || 0)) * 1000\n        );\n        const idTokenClaims = AuthToken.extractTokenClaims(\n            response.id_token,\n            this.crypto.base64Decode\n        );\n        const account = this.fromNaaAccountInfo(\n            response.account,\n            idTokenClaims\n        );\n\n        const authenticationResult: AuthenticationResult = {\n            authority: response.authority || account.environment,\n            uniqueId: account.localAccountId,\n            tenantId: account.tenantId,\n            scopes: response.scope.split(\" \"),\n            account,\n            idToken: response.id_token !== undefined ? response.id_token : \"\",\n            idTokenClaims,\n            accessToken: response.access_token,\n            fromCache: true,\n            expiresOn: expiresOn,\n            tokenType:\n                request.authenticationScheme || AuthenticationScheme.BEARER,\n            correlationId: request.correlationId,\n            extExpiresOn: expiresOn,\n            state: request.state,\n        };\n\n        return authenticationResult;\n    }\n\n    /*\n     *  export type AccountInfo = {\n     *     homeAccountId: string;\n     *     environment: string;\n     *     tenantId: string;\n     *     username: string;\n     *     localAccountId: string;\n     *     name?: string;\n     *     idToken?: string;\n     *     idTokenClaims?: TokenClaims & {\n     *         [key: string]:\n     *             | string\n     *             | number\n     *             | string[]\n     *             | object\n     *             | undefined\n     *             | unknown;\n     *     };\n     *     nativeAccountId?: string;\n     *     authorityType?: string;\n     * };\n     */\n    public fromNaaAccountInfo(\n        fromAccount: NaaAccountInfo,\n        idTokenClaims?: TokenClaims\n    ): MsalAccountInfo {\n        const effectiveIdTokenClaims =\n            idTokenClaims || (fromAccount.idTokenClaims as TokenClaims);\n\n        const localAccountId =\n            fromAccount.localAccountId ||\n            effectiveIdTokenClaims?.oid ||\n            effectiveIdTokenClaims?.sub ||\n            \"\";\n\n        const tenantId =\n            fromAccount.tenantId || effectiveIdTokenClaims?.tid || \"\";\n\n        const homeAccountId =\n            fromAccount.homeAccountId || `${localAccountId}.${tenantId}`;\n\n        const username =\n            fromAccount.username ||\n            effectiveIdTokenClaims?.preferred_username ||\n            \"\";\n\n        const name = fromAccount.name || effectiveIdTokenClaims?.name;\n\n        const account: MsalAccountInfo = {\n            homeAccountId,\n            environment: fromAccount.environment,\n            tenantId,\n            username,\n            localAccountId,\n            name,\n            idToken: fromAccount.idToken,\n            idTokenClaims: effectiveIdTokenClaims,\n        };\n\n        return account;\n    }\n\n    /**\n     *\n     * @param error BridgeError\n     * @returns AuthError, ClientAuthError, ClientConfigurationError, ServerError, InteractionRequiredError\n     */\n    public fromBridgeError(\n        error: unknown\n    ):\n        | AuthError\n        | ClientAuthError\n        | ClientConfigurationError\n        | ServerError\n        | InteractionRequiredAuthError {\n        if (isBridgeError(error)) {\n            switch (error.status) {\n                case BridgeStatusCode.USER_CANCEL:\n                    return new ClientAuthError(\n                        ClientAuthErrorCodes.userCanceled\n                    );\n                case BridgeStatusCode.NO_NETWORK:\n                    return new ClientAuthError(\n                        ClientAuthErrorCodes.noNetworkConnectivity\n                    );\n                case BridgeStatusCode.ACCOUNT_UNAVAILABLE:\n                    return new ClientAuthError(\n                        ClientAuthErrorCodes.noAccountFound\n                    );\n                case BridgeStatusCode.DISABLED:\n                    return new ClientAuthError(\n                        ClientAuthErrorCodes.nestedAppAuthBridgeDisabled\n                    );\n                case BridgeStatusCode.NESTED_APP_AUTH_UNAVAILABLE:\n                    return new ClientAuthError(\n                        error.code ||\n                            ClientAuthErrorCodes.nestedAppAuthBridgeDisabled,\n                        error.description\n                    );\n                case BridgeStatusCode.TRANSIENT_ERROR:\n                case BridgeStatusCode.PERSISTENT_ERROR:\n                    return new ServerError(error.code, error.description);\n                case BridgeStatusCode.USER_INTERACTION_REQUIRED:\n                    return new InteractionRequiredAuthError(\n                        error.code,\n                        error.description\n                    );\n                default:\n                    return new AuthError(error.code, error.description);\n            }\n        } else {\n            return new AuthError(\"unknown_error\", \"An unknown error occurred\");\n        }\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { BridgeStatusCode } from \"./BridgeStatusCode\";\n\nexport type BridgeError = {\n    status: BridgeStatusCode;\n    code?: string; // auth_flow_last_error such as invalid_grant\n    subError?: string; // server_suberror_code such as consent_required\n    description?: string;\n    properties?: object; // additional telemetry info\n};\n\nexport function isBridgeError(error: unknown): error is BridgeError {\n    return (error as BridgeError).status !== undefined;\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { AuthError } from \"@azure/msal-common\";\n\n/**\n * NestedAppAuthErrorMessage class containing string constants used by error codes and messages.\n */\nexport const NestedAppAuthErrorMessage = {\n    unsupportedMethod: {\n        code: \"unsupported_method\",\n        desc: \"The PKCE code challenge and verifier could not be generated.\",\n    },\n};\n\nexport class NestedAppAuthError extends AuthError {\n    constructor(errorCode: string, errorMessage?: string) {\n        super(errorCode, errorMessage);\n\n        Object.setPrototypeOf(this, NestedAppAuthError.prototype);\n        this.name = \"NestedAppAuthError\";\n    }\n\n    public static createUnsupportedError(): NestedAppAuthError {\n        return new NestedAppAuthError(\n            NestedAppAuthErrorMessage.unsupportedMethod.code,\n            NestedAppAuthErrorMessage.unsupportedMethod.desc\n        );\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    CommonAuthorizationUrlRequest,\n    CommonSilentFlowRequest,\n    PerformanceCallbackFunction,\n    AccountInfo,\n    Logger,\n    ICrypto,\n    IPerformanceClient,\n    DEFAULT_CRYPTO_IMPLEMENTATION,\n    PerformanceEvents,\n    AccountFilter,\n    TimeUtils,\n} from \"@azure/msal-common\";\nimport { ITokenCache } from \"../cache/ITokenCache\";\nimport { BrowserConfiguration } from \"../config/Configuration\";\nimport { INavigationClient } from \"../navigation/INavigationClient\";\nimport { AuthorizationCodeRequest } from \"../request/AuthorizationCodeRequest\";\nimport { EndSessionPopupRequest } from \"../request/EndSessionPopupRequest\";\nimport { EndSessionRequest } from \"../request/EndSessionRequest\";\nimport { PopupRequest } from \"../request/PopupRequest\";\nimport { RedirectRequest } from \"../request/RedirectRequest\";\nimport { SilentRequest } from \"../request/SilentRequest\";\nimport { SsoSilentRequest } from \"../request/SsoSilentRequest\";\nimport { ApiId, WrapperSKU, InteractionType } from \"../utils/BrowserConstants\";\nimport { IController } from \"./IController\";\nimport { TeamsAppOperatingContext } from \"../operatingcontext/TeamsAppOperatingContext\";\nimport { IBridgeProxy } from \"../naa/IBridgeProxy\";\nimport { CryptoOps } from \"../crypto/CryptoOps\";\nimport { NestedAppAuthAdapter } from \"../naa/mapping/NestedAppAuthAdapter\";\nimport { NestedAppAuthError } from \"../error/NestedAppAuthError\";\nimport { EventHandler } from \"../event/EventHandler\";\nimport { EventType } from \"../event/EventType\";\nimport { EventCallbackFunction, EventError } from \"../event/EventMessage\";\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\nimport { BrowserCacheManager } from \"../cache/BrowserCacheManager\";\nimport { ClearCacheRequest } from \"../request/ClearCacheRequest\";\n\nexport class NestedAppAuthController implements IController {\n    // OperatingContext\n    protected readonly operatingContext: TeamsAppOperatingContext;\n\n    // BridgeProxy\n    protected readonly bridgeProxy: IBridgeProxy;\n\n    // Crypto interface implementation\n    protected readonly browserCrypto: ICrypto;\n\n    // Input configuration by developer/user\n    protected readonly config: BrowserConfiguration;\n\n    // Logger\n    protected logger: Logger;\n\n    // Performance telemetry client\n    protected readonly performanceClient: IPerformanceClient;\n\n    // EventHandler\n    protected readonly eventHandler: EventHandler;\n\n    // NestedAppAuthAdapter\n    protected readonly nestedAppAuthAdapter: NestedAppAuthAdapter;\n\n    constructor(operatingContext: TeamsAppOperatingContext) {\n        this.operatingContext = operatingContext;\n        const proxy = this.operatingContext.getBridgeProxy();\n        if (proxy !== undefined) {\n            this.bridgeProxy = proxy;\n        } else {\n            throw new Error(\"unexpected: bridgeProxy is undefined\");\n        }\n\n        // Set the configuration.\n        this.config = operatingContext.getConfig();\n\n        // Initialize logger\n        this.logger = this.operatingContext.getLogger();\n        // Initialize performance client\n        this.performanceClient = this.config.telemetry.client;\n\n        // Initialize the crypto class.\n        this.browserCrypto = operatingContext.isBrowserEnvironment()\n            ? new CryptoOps(this.logger, this.performanceClient)\n            : DEFAULT_CRYPTO_IMPLEMENTATION;\n\n        this.eventHandler = new EventHandler(this.logger, this.browserCrypto);\n\n        this.nestedAppAuthAdapter = new NestedAppAuthAdapter(\n            this.config.auth.clientId,\n            this.config.auth.clientCapabilities,\n            this.browserCrypto,\n            this.logger\n        );\n    }\n    getBrowserStorage(): BrowserCacheManager {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n\n    getEventHandler(): EventHandler {\n        return this.eventHandler;\n    }\n\n    static async createController(\n        operatingContext: TeamsAppOperatingContext\n    ): Promise<IController> {\n        const controller = new NestedAppAuthController(operatingContext);\n        return Promise.resolve(controller);\n    }\n\n    initialize(): Promise<void> {\n        // do nothing not required by this controller\n        return Promise.resolve();\n    }\n\n    private async acquireTokenInteractive(\n        request: PopupRequest | RedirectRequest\n    ): Promise<AuthenticationResult> {\n        this.eventHandler.emitEvent(\n            EventType.ACQUIRE_TOKEN_START,\n            InteractionType.Popup,\n            request\n        );\n\n        const atPopupMeasurement = this.performanceClient.startMeasurement(\n            PerformanceEvents.AcquireTokenPopup,\n            request.correlationId\n        );\n\n        atPopupMeasurement?.add({ nestedAppAuthRequest: true });\n\n        try {\n            const naaRequest =\n                this.nestedAppAuthAdapter.toNaaTokenRequest(request);\n            const reqTimestamp = TimeUtils.nowSeconds();\n            const response = await this.bridgeProxy.getTokenInteractive(\n                naaRequest\n            );\n            const result: AuthenticationResult =\n                this.nestedAppAuthAdapter.fromNaaTokenResponse(\n                    naaRequest,\n                    response,\n                    reqTimestamp\n                );\n\n            this.operatingContext.setActiveAccount(result.account);\n            this.eventHandler.emitEvent(\n                EventType.ACQUIRE_TOKEN_SUCCESS,\n                InteractionType.Popup,\n                result\n            );\n\n            atPopupMeasurement.add({\n                accessTokenSize: result.accessToken.length,\n                idTokenSize: result.idToken.length,\n            });\n\n            atPopupMeasurement.end({\n                success: true,\n                requestId: result.requestId,\n            });\n\n            return result;\n        } catch (e) {\n            const error = this.nestedAppAuthAdapter.fromBridgeError(e);\n            this.eventHandler.emitEvent(\n                EventType.ACQUIRE_TOKEN_FAILURE,\n                InteractionType.Popup,\n                null,\n                e as EventError\n            );\n\n            atPopupMeasurement.end({\n                errorCode: error.errorCode,\n                subErrorCode: error.subError,\n                success: false,\n            });\n\n            throw error;\n        }\n    }\n\n    private async acquireTokenSilentInternal(\n        request: SilentRequest\n    ): Promise<AuthenticationResult> {\n        this.eventHandler.emitEvent(\n            EventType.ACQUIRE_TOKEN_START,\n            InteractionType.Silent,\n            request\n        );\n\n        const ssoSilentMeasurement = this.performanceClient.startMeasurement(\n            PerformanceEvents.SsoSilent,\n            request.correlationId\n        );\n\n        ssoSilentMeasurement?.increment({\n            visibilityChangeCount: 0,\n        });\n\n        ssoSilentMeasurement?.add({\n            nestedAppAuthRequest: true,\n        });\n\n        try {\n            const naaRequest =\n                this.nestedAppAuthAdapter.toNaaTokenRequest(request);\n            const reqTimestamp = TimeUtils.nowSeconds();\n            const response = await this.bridgeProxy.getTokenSilent(naaRequest);\n\n            const result: AuthenticationResult =\n                this.nestedAppAuthAdapter.fromNaaTokenResponse(\n                    naaRequest,\n                    response,\n                    reqTimestamp\n                );\n\n            this.operatingContext.setActiveAccount(result.account);\n            this.eventHandler.emitEvent(\n                EventType.ACQUIRE_TOKEN_SUCCESS,\n                InteractionType.Silent,\n                result\n            );\n            ssoSilentMeasurement?.add({\n                accessTokenSize: result.accessToken.length,\n                idTokenSize: result.idToken.length,\n            });\n            ssoSilentMeasurement?.end({\n                success: true,\n                requestId: result.requestId,\n            });\n            return result;\n        } catch (e) {\n            const error = this.nestedAppAuthAdapter.fromBridgeError(e);\n            this.eventHandler.emitEvent(\n                EventType.ACQUIRE_TOKEN_FAILURE,\n                InteractionType.Silent,\n                null,\n                e as EventError\n            );\n            ssoSilentMeasurement?.end({\n                errorCode: error.errorCode,\n                subErrorCode: error.subError,\n                success: false,\n            });\n            throw error;\n        }\n    }\n\n    async acquireTokenPopup(\n        request: PopupRequest\n    ): Promise<AuthenticationResult> {\n        return this.acquireTokenInteractive(request);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    acquireTokenRedirect(request: RedirectRequest): Promise<void> {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n\n    async acquireTokenSilent(\n        silentRequest: SilentRequest\n    ): Promise<AuthenticationResult> {\n        return this.acquireTokenSilentInternal(silentRequest);\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    acquireTokenByCode(\n        request: AuthorizationCodeRequest // eslint-disable-line @typescript-eslint/no-unused-vars\n    ): Promise<AuthenticationResult> {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n    acquireTokenNative(\n        request: // eslint-disable-line @typescript-eslint/no-unused-vars\n        | SilentRequest\n            | Partial<\n                  Omit<\n                      CommonAuthorizationUrlRequest,\n                      | \"requestedClaimsHash\"\n                      | \"responseMode\"\n                      | \"codeChallenge\"\n                      | \"codeChallengeMethod\"\n                      | \"nativeBroker\"\n                  >\n              >\n            | PopupRequest,\n        apiId: ApiId, // eslint-disable-line @typescript-eslint/no-unused-vars\n        accountId?: string | undefined // eslint-disable-line @typescript-eslint/no-unused-vars\n    ): Promise<AuthenticationResult> {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n    acquireTokenByRefreshToken(\n        commonRequest: CommonSilentFlowRequest, // eslint-disable-line @typescript-eslint/no-unused-vars\n        silentRequest: SilentRequest // eslint-disable-line @typescript-eslint/no-unused-vars\n    ): Promise<AuthenticationResult> {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n\n    /**\n     * Adds event callbacks to array\n     * @param callback\n     */\n    addEventCallback(callback: EventCallbackFunction): string | null {\n        return this.eventHandler.addEventCallback(callback);\n    }\n\n    /**\n     * Removes callback with provided id from callback array\n     * @param callbackId\n     */\n    removeEventCallback(callbackId: string): void {\n        this.eventHandler.removeEventCallback(callbackId);\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    addPerformanceCallback(callback: PerformanceCallbackFunction): string {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    removePerformanceCallback(callbackId: string): boolean {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n    enableAccountStorageEvents(): void {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n    disableAccountStorageEvents(): void {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    getAccount(accountFilter: AccountFilter): AccountInfo | null {\n        throw NestedAppAuthError.createUnsupportedError();\n        // TODO: Look at standard implementation\n    }\n\n    getAccountByHomeId(homeAccountId: string): AccountInfo | null {\n        const currentAccount = this.operatingContext.getActiveAccount();\n        if (currentAccount !== undefined) {\n            if (currentAccount.homeAccountId === homeAccountId) {\n                return this.nestedAppAuthAdapter.fromNaaAccountInfo(\n                    currentAccount\n                );\n            } else {\n                return null;\n            }\n        } else {\n            return null;\n        }\n    }\n\n    getAccountByLocalId(localId: string): AccountInfo | null {\n        const currentAccount = this.operatingContext.getActiveAccount();\n        if (currentAccount !== undefined) {\n            if (currentAccount.localAccountId === localId) {\n                return this.nestedAppAuthAdapter.fromNaaAccountInfo(\n                    currentAccount\n                );\n            } else {\n                return null;\n            }\n        } else {\n            return null;\n        }\n    }\n\n    getAccountByUsername(userName: string): AccountInfo | null {\n        const currentAccount = this.operatingContext.getActiveAccount();\n        if (currentAccount !== undefined) {\n            if (currentAccount.username === userName) {\n                return this.nestedAppAuthAdapter.fromNaaAccountInfo(\n                    currentAccount\n                );\n            } else {\n                return null;\n            }\n        } else {\n            return null;\n        }\n    }\n    getAllAccounts(): AccountInfo[] {\n        const currentAccount = this.operatingContext.getActiveAccount();\n        if (currentAccount !== undefined) {\n            return [\n                this.nestedAppAuthAdapter.fromNaaAccountInfo(currentAccount),\n            ];\n        } else {\n            return [];\n        }\n    }\n    handleRedirectPromise(\n        hash?: string | undefined // eslint-disable-line @typescript-eslint/no-unused-vars\n    ): Promise<AuthenticationResult | null> {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n    loginPopup(\n        request?: PopupRequest | undefined // eslint-disable-line @typescript-eslint/no-unused-vars\n    ): Promise<AuthenticationResult> {\n        if (request !== undefined) {\n            return this.acquireTokenInteractive(request);\n        } else {\n            throw NestedAppAuthError.createUnsupportedError();\n        }\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    loginRedirect(request?: RedirectRequest | undefined): Promise<void> {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    logout(logoutRequest?: EndSessionRequest | undefined): Promise<void> {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n    logoutRedirect(\n        logoutRequest?: EndSessionRequest | undefined // eslint-disable-line @typescript-eslint/no-unused-vars\n    ): Promise<void> {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n    logoutPopup(\n        logoutRequest?: EndSessionPopupRequest | undefined // eslint-disable-line @typescript-eslint/no-unused-vars\n    ): Promise<void> {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n    ssoSilent(\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        request: Partial<\n            Omit<\n                CommonAuthorizationUrlRequest,\n                | \"requestedClaimsHash\"\n                | \"responseMode\"\n                | \"codeChallenge\"\n                | \"codeChallengeMethod\"\n                | \"nativeBroker\"\n            >\n        >\n    ): Promise<AuthenticationResult> {\n        return this.acquireTokenSilentInternal(request as SilentRequest);\n    }\n    getTokenCache(): ITokenCache {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n\n    /**\n     * Returns the logger instance\n     */\n    public getLogger(): Logger {\n        return this.logger;\n    }\n\n    /**\n     * Replaces the default logger set in configurations with new Logger with new configurations\n     * @param logger Logger instance\n     */\n    setLogger(logger: Logger): void {\n        this.logger = logger;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    setActiveAccount(account: AccountInfo | null): void {\n        /*\n         * StandardController uses this to allow the developer to set the active account\n         * in the nested app auth scenario the active account is controlled by the app hosting the nested app\n         */\n        this.logger.warning(\"nestedAppAuth does not support setActiveAccount\");\n        return;\n    }\n    getActiveAccount(): AccountInfo | null {\n        const currentAccount = this.operatingContext.getActiveAccount();\n        if (currentAccount !== undefined) {\n            return this.nestedAppAuthAdapter.fromNaaAccountInfo(currentAccount);\n        } else {\n            return null;\n        }\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    initializeWrapperLibrary(sku: WrapperSKU, version: string): void {\n        /*\n         * Standard controller uses this to set the sku and version of the wrapper library in the storage\n         * we do nothing here\n         */\n        return;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    setNavigationClient(navigationClient: INavigationClient): void {\n        this.logger.warning(\n            \"setNavigationClient is not supported in nested app auth\"\n        );\n    }\n    getConfiguration(): BrowserConfiguration {\n        return this.config;\n    }\n    isBrowserEnv(): boolean {\n        return this.operatingContext.isBrowserEnvironment();\n    }\n    getBrowserCrypto(): ICrypto {\n        return this.browserCrypto;\n    }\n    getPerformanceClient(): IPerformanceClient {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n\n    getRedirectResponse(): Map<string, Promise<AuthenticationResult | null>> {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n    preflightBrowserEnvironmentCheck(\n        interactionType: InteractionType, // eslint-disable-line @typescript-eslint/no-unused-vars\n        setInteractionInProgress?: boolean | undefined // eslint-disable-line @typescript-eslint/no-unused-vars\n    ): void {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    async clearCache(logoutRequest?: ClearCacheRequest): Promise<void> {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    async hydrateCache(\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        result: AuthenticationResult,\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        request:\n            | SilentRequest\n            | SsoSilentRequest\n            | RedirectRequest\n            | PopupRequest\n    ): Promise<void> {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n}\n"],"names":["BridgeStatusCode","NestedAppAuthAdapter","clientId","clientCapabilities","crypto","logger","_classCallCheck","this","_createClass","key","value","request","_request$account","extraParams","undefined","extraQueryParameters","Map","Object","entries","claims","RequestParameterBuilder","addClientCapabilitiesToClaims","userObjectId","account","homeAccountId","authority","scope","scopes","join","correlationId","createNewGuid","nonce","StringUtils","isEmptyObj","state","authenticationScheme","AuthenticationScheme","BEARER","extraParameters","response","reqTimestamp","id_token","access_token","createClientAuthError","ClientAuthErrorCodes","expiresOn","Date","expires_in","idTokenClaims","AuthToken","base64Decode","fromNaaAccountInfo","environment","uniqueId","localAccountId","tenantId","split","idToken","accessToken","fromCache","tokenType","extExpiresOn","fromAccount","effectiveIdTokenClaims","oid","sub","tid","concat","username","preferred_username","name","error","status","isBridgeError","AuthError","USER_CANCEL","ClientAuthError","NO_NETWORK","ACCOUNT_UNAVAILABLE","DISABLED","NESTED_APP_AUTH_UNAVAILABLE","code","description","TRANSIENT_ERROR","PERSISTENT_ERROR","ServerError","USER_INTERACTION_REQUIRED","InteractionRequiredAuthError","NestedAppAuthErrorMessage","desc","NestedAppAuthError","_AuthError","_inherits","_super","_createSuper","errorCode","errorMessage","_this","call","setPrototypeOf","_assertThisInitialized","prototype","NestedAppAuthController","operatingContext","proxy","getBridgeProxy","Error","bridgeProxy","config","getConfig","getLogger","performanceClient","telemetry","client","browserCrypto","isBrowserEnvironment","CryptoOps","DEFAULT_CRYPTO_IMPLEMENTATION","eventHandler","EventHandler","nestedAppAuthAdapter","auth","createUnsupportedError","Promise","resolve","_acquireTokenInteractive","_asyncToGenerator","_regeneratorRuntime","mark","_callee","atPopupMeasurement","naaRequest","result","wrap","_context","prev","next","emitEvent","EventType","ACQUIRE_TOKEN_START","InteractionType","Popup","startMeasurement","PerformanceEvents","AcquireTokenPopup","add","nestedAppAuthRequest","toNaaTokenRequest","TimeUtils","nowSeconds","getTokenInteractive","sent","fromNaaTokenResponse","setActiveAccount","ACQUIRE_TOKEN_SUCCESS","accessTokenSize","length","idTokenSize","end","success","requestId","abrupt","t0","fromBridgeError","ACQUIRE_TOKEN_FAILURE","subErrorCode","subError","stop","_x","apply","arguments","_acquireTokenSilentInternal","_callee2","ssoSilentMeasurement","_context2","Silent","SsoSilent","increment","visibilityChangeCount","getTokenSilent","_x2","_acquireTokenPopup","_callee3","_context3","acquireTokenInteractive","_x3","_acquireTokenSilent","_callee4","silentRequest","_context4","acquireTokenSilentInternal","_x4","apiId","accountId","commonRequest","callback","addEventCallback","callbackId","removeEventCallback","accountFilter","currentAccount","getActiveAccount","localId","userName","hash","logoutRequest","warning","sku","version","navigationClient","interactionType","setInteractionInProgress","_callee5","_context5","_x5","_clearCache","_callee6","_context6","_x6","_x7","_hydrateCache","_createController","_callee7","controller","_context7","_x8"],"sourceRoot":""}